import logging

from lib.proto.pkt_proto import *

# -------------------------------
#                                                                                                                  
# App Base Import                                                                                 
#                        
# -------------------------------

from ryu.lib import dpid as dpid_lib
from function.arp import Arp_Flow, Arp_Request


def Nat_Ready(ofsw, ofuro_nat_set):

        logging.info('+++++++++++++++ NAT FLOW SET Starting +++++++++++++++')

#        for nat_entry in ofuro_nat_set:

#            for k, v in nat_entry.items(): 
#                if v == "":
#                    logging.info('     ======= NAT ENTRY [%s] NO DATA ======', k)
#                    logging.info('+++++++++++++++++++++++++++++++++++++++++++++++++++++')
#                    return

        nat_set = []

        for nat_entry in ofuro_nat_set:
            nat_part = {}

            for item_k, item_v in nat_entry.items():

                if item_v == "":

                    logging.info('     ======= NAT ENTRY [%s] NO DATA ======', k)
                    logging.info('+++++++++++++++++++++++++++++++++++++++++++++++++++++')
                    return
                
                nat_part.update({item_k:item_v})


            arp_data = {nat_part["SW_IP"] : nat_part["SW_PORT"] }

            logging.info("   [ARP DATA] --> %s ", arp_data)

            # Packet In Flow Set For ARP Packet 
            Arp_Flow(ofsw, arp_data, FLAG=0)

            nat_part.update({"CLIENT_MAC":"", "STAT":0})
            nat_set.append(nat_part)
        
        ofsw.ofuro_data.nat_entry.append(nat_set)
        logging.info("**** [NAT DATA] --> %s ", ofsw.ofuro_data.nat_entry)

        # Find Client MAC Address
        for arp_req in nat_set:
            Arp_Request(ofsw, arp_req["SW_IP"],  arp_req["CLIENT_IP"],  arp_req["SW_PORT"])



def Nat_Flow_Del(ofsw, ofuro_nat_set):

        logging.info('--------------- NAT FLOW DELETE Starting -------------------')


        for nat_entry in ofuro_nat_set:

            for k, v in nat_entry.items(): 
                if v == "":
                    logging.info('======= NAT ENTRY [%s] NO DATA ======', k)
                    return

            a_flow = {
                'priority' : PRIORITY_IP_HANDLING,
                'match': {
                    'eth_type': ether.ETH_TYPE_IP ,
                },
                'actions': [
                ]
            }

            z_flow = {
                'priority' : PRIORITY_IP_HANDLING,
                'match': {
                    'eth_type': ether.ETH_TYPE_IP ,
                },
                'actions': [
                ]
            }
            

            a_port_mac =  ofsw.port_data[nat_entry["A_SW_PORT"]].mac
            z_port_mac =  ofsw.port_data[nat_entry["Z_SW_PORT"]].mac

            logging.info('********** NAT ENTRY : %s : %s ',nat_entry["A_SW_PORT"],  a_port_mac)

            a_flow["match"].update({"ipv4_dst": nat_entry["A_SW_IP"] })
            a_flow["match"].update({"ipv4_src": nat_entry["A_CLIENT_IP"] })
            a_flow["match"].update({"in_port": nat_entry["A_SW_PORT"] })

            a_flow["actions"].append({"type": "SET_FIELD", "field": "eth_src","value": z_port_mac })
            a_flow["actions"].append({"type": "SET_FIELD", "field": "eth_dst","value": nat_entry["Z_CLIENT_MAC"] })
            a_flow["actions"].append({"type": "SET_FIELD", "field": "ipv4_src","value": nat_entry["Z_SW_IP"] })
            a_flow["actions"].append({"type": "SET_FIELD", "field": "ipv4_dst","value": nat_entry["Z_CLIENT_IP"] })
            a_flow["actions"].append({"type": "OUTPUT", "port": nat_entry["Z_SW_PORT"] })


            z_flow["match"].update({"ipv4_dst": nat_entry["Z_SW_IP"] })
            z_flow["match"].update({"ipv4_src": nat_entry["Z_CLIENT_IP"] })
            z_flow["match"].update({"in_port": nat_entry["Z_SW_PORT"] })

            z_flow["actions"].append({"type": "SET_FIELD", "field": "eth_src","value": a_port_mac })
            z_flow["actions"].append({"type": "SET_FIELD", "field": "eth_dst","value": nat_entry["A_CLIENT_MAC"] })
            z_flow["actions"].append({"type": "SET_FIELD", "field": "ipv4_src","value": nat_entry["A_SW_IP"] })
            z_flow["actions"].append({"type": "SET_FIELD", "field": "ipv4_dst","value": nat_entry["A_CLIENT_IP"] })
            z_flow["actions"].append({"type": "OUTPUT", "port": nat_entry["A_SW_PORT"] })

            a_arp_data = {nat_entry["A_SW_IP"] : {"DELETE" : nat_entry["A_SW_PORT"] }}
            z_arp_data = {nat_entry["Z_SW_IP"] : {"DELETE" : nat_entry["Z_SW_PORT"] }}

            Arp_Flow_Del(ofsw, a_arp_data)
            Arp_Flow_Del(ofsw, z_arp_data)

            ofsw.flow_ctl.delete_flow(a_flow)
            ofsw.flow_ctl.delete_flow(z_flow)

            logging.info('------------------------------------------------------------')
